#include <studo.h>
#include <studio.h>

#define MAX_LIST_SIZE 100 // 리스트의 최대 크기

typedef int   element   ; // 항목의 정의
typedef struct{
	elenment array[MAX_LIST_SIZE]; // 배열 정의
	int size; //  현재 리스트에 저장된 항목들의 개수
}ArrayListType;
// 오류 처리 함수
void error(char*message){
fprintf(stderr, "%s\n",message);
exit(1);
}
// 리스트 초기화 함수 
void init(ArrayListType +L){
L ->size = 0;
}
// 리스트가 비어 있으면 1을 반환
// 그렇지 않으면 0 을 반화
int is_empty(ArrayListType+L){
return L->size == 0;
}
// 리스트가 가득차 있으면 1을 반환 
// 그렇지 않으면 1을 반환
int is_full(ArrayListType +L){
return L-> size == MAX_LIST_SIZE;
}
element get_entry(ArrayListType+L, int pos)
{
if(pos<0 || pos >= L->size)
	error("위치오류");
return L-> array[pos];
}
// 리스트 출력
void print_List(ArrayListType +L)
{
int i ;
for ( i = 0; i<L->size; i++)
	printf("%d->",L->array[i]);
print("\n");
}
void insert_last(ArrayListType +L,element item)
{
if(L->size >=MAX_LIST_SIZE) {
error("리스트 오버플로우");
}
L->array[L-size++] = item;
}
void insert(ArrayListType +,int pos )
{
if(pos < 0 || pos >= L->size)
error("위치오류");
return L->array[pos];
}
// 리스트 출력
void print_list(ArrayListType +L)
{
int i ;
for(i=0; i < L->size; i++)
printf("%d->", L->array[i]);
printf("\n");

elementdelete(ArrayList

int main(void){
// ArrayListType를 정적으로 생성하고 ArrayListType를 가르키는 포인터를 함수의 매개변수로 전달한다.
ArrayListType list;

init(&list);
insert(&list,0,10); print_list(%list); // 0번째 위치에 10추가
insert(&list,0,20); print_list(%list); // 0번째 위치에 20추가
insert(&list,0,30); print_list(%list); // 0번째 위치에 30추가
insert_last(&list,0,40); print_list(%list); // 맨끝에  40추가
delate(&list, 0); print_list(&list); // 0번째 항목 삭제

